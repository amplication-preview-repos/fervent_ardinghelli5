/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateColoArgs } from "./CreateColoArgs";
import { UpdateColoArgs } from "./UpdateColoArgs";
import { DeleteColoArgs } from "./DeleteColoArgs";
import { ColoCountArgs } from "./ColoCountArgs";
import { ColoFindManyArgs } from "./ColoFindManyArgs";
import { ColoFindUniqueArgs } from "./ColoFindUniqueArgs";
import { Colo } from "./Colo";
import { ColoService } from "../colo.service";
@graphql.Resolver(() => Colo)
export class ColoResolverBase {
  constructor(protected readonly service: ColoService) {}

  async _colosMeta(
    @graphql.Args() args: ColoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Colo])
  async colos(@graphql.Args() args: ColoFindManyArgs): Promise<Colo[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Colo, { nullable: true })
  async colo(@graphql.Args() args: ColoFindUniqueArgs): Promise<Colo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Colo)
  async createColo(@graphql.Args() args: CreateColoArgs): Promise<Colo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Colo)
  async updateColo(@graphql.Args() args: UpdateColoArgs): Promise<Colo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Colo)
  async deleteColo(@graphql.Args() args: DeleteColoArgs): Promise<Colo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
